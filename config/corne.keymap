/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        //        as: auto_shift {
        //            compatible = "zmk,behavior-hold-tap";
        //            #binding-cells = <2>;
        //            tapping_term_ms = <200>;
        //            quick_tap_ms = <0>;
        //            flavor = "tap-preferred";
        //            bindings = <&kp>, <&kp>;
        //        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Layer1 {
            bindings = <&to 1>;
            key-positions = <31 21>;
            layers = <0 1 2 3 4>;
        };

        Layer2 {
            bindings = <&to 2>;
            key-positions = <31 22>;
            layers = <0 1 2 3 4>;
        };

        Layer3 {
            bindings = <&to 3>;
            key-positions = <31 23>;
            layers = <0 2 1 3 4>;
        };

        Layer4 {
            bindings = <&to 4>;
            key-positions = <31 11>;
            layers = <0 2 1 3 4>;
        };

        Layer5 {
            bindings = <&to 5>;
            key-positions = <31 12>;
            layers = <0 2 3 4 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "Base";
            bindings = <
  &kp Q       &kp W        &kp E       &kp R         &kp T        &kp Y    &kp U         &kp I       &kp O        &kp P
  &hm LGUI A  &hm LCTRL S  &hm LALT D  &hm LSHIFT F  &kp G        &kp H    &hm RSHIFT J  &hm RALT K  &hm LCTRL L  &hm LGUI SQT
  &kp Z       &kp X        &kp C       &kp V         &kp B        &kp N    &kp M         &kp COMMA   &kp PERIOD   &kp SLASH
                           &kp LGUI    &to 0         &kp SPACE    &kp RET  &mo 2         &kp BSPC
            >;
        };

        LTenKey {
            bindings = <
  &trans          &kp N7  &kp N8  &kp N9  &trans       &kp PAGE_UP    &trans           &kp UP_ARROW       &trans     &trans
  &hm LEFT_GUI A  &kp N4  &kp N5  &kp N6  &kp BSPC     &kp PAGE_DOWN  &kp LEFT         &kp DOWN           &kp RIGHT  &trans
  &trans          &kp N1  &kp N2  &kp N3  &kp TAB      &trans         &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RALT   &kp RGUI
                          &kp N0  &trans  &kp ENTER    &trans         &trans           &trans
            >;

            label = "LTenKey";
        };

        Function {
            bindings = <
  &trans          &kp F7  &kp F8  &kp F9  &kp F10      &kp PAGE_UP    &trans           &kp UP_ARROW       &trans     &trans
  &hm LEFT_GUI A  &kp F4  &kp F5  &kp F6  &kp F11      &kp PAGE_DOWN  &kp LEFT         &kp DOWN           &kp RIGHT  &trans
  &trans          &kp F1  &kp F2  &kp F3  &kp F12      &trans         &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RALT   &kp RGUI
                          &kp N0  &trans  &kp ENTER    &trans         &trans           &trans
            >;

            label = "Function";
        };

        Bluetooth {
            bindings = <
  &trans  &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans
  &trans  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans        &trans  &trans  &trans  &trans  &trans
  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR    &trans  &trans  &trans  &trans  &trans
                        &trans        &trans        &trans        &trans  &trans  &trans
            >;

            label = "Bluetooth";
        };

        FPS {
            bindings = <
  &trans  &trans  &kp W   &kp E   &kp R        &trans  &trans  &trans  &trans  &trans
  &trans  &kp A   &kp S   &kp D   &trans       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &kp SPACE    &trans  &trans  &trans
            >;

            label = "FPS";
        };

        RArrows {
            label = "RArrows";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp PAGE_UP    &kp HOME         &kp UP_ARROW       &kp END    &trans
  &trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &kp LEFT         &kp DOWN           &kp RIGHT  &trans
  &trans  &trans  &trans  &trans  &trans    &trans         &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RALT   &kp RGUI
                  &trans  &trans  &trans    &trans         &trans           &trans
            >;
        };

        //                raise_layer {
        // -----------------------------------------------------------------------------------------
        // | 1! |  2@ |  3# |  4$ |  5% |     |  6^ |  7& |  8* |  9(  |  0)  |
        // | -_ |  =+ |  {  |  [  |  (  |     |  )  |  ]  |  }  |  /?  |  \|  |
        // | `~ |     |     |  ,< |  :  |     |  ;  |  .> | CTRL| META |      |
        //            | GUI | ESC | SPC |     | ENT |     | TAB |
        //                        display-name = "Raise";
        //                        bindings = <
        //   AS(N1)    AS(N2)    AS(N3)    AS(N4)    AS(N5)        AS(N6)    AS(N7)    AS(N8)    AS(N9)   AS(N0)
        //   AS(MINUS) AS(EQUAL) &kp LBRC  &kp LBKT  &kp LPAR      &kp RPAR  &kp RBKT  &kp RBRC  AS(FSLH) AS(BSLH)
        //   AS(GRAVE) &trans    &trans    AS(COMMA) &kp COLON     &kp SEMI  AS(DOT)   &kp LCTRL &kp RALT &trans
        //                       &kp LGUI  &kp ESC   &kp SPACE     AS(RET)   &trans    &kp TAB
        //                        >;
        //                };
    };
};
